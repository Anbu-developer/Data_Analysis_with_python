# -*- coding: utf-8 -*-
"""Exploratory Data Analysis (EDA) .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hNDPhQ2tXBDBfWkqb66Z8bMv5YWnRrKo

# **csv file: HR are bit worried about the high attrition rate,thus being a data analyst it your task to get the resons of attrition rate and also give suggession to to be implemented so that overcome the attrition**

**To analyze the reasons for high attrition and provide actionable suggestions, we can perform Exploratory Data Analysis (EDA) on the dataset you provided. Here's how we approach the problem step-by-step**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#step 1
data= pd.read_csv('People.csv')
data.head()

print(data.info())

# Step 2: Attrition Rate Analysis
# Check for attrition column (assuming 'left' indicates attrition)
print("____________________________________  Attrition Counts ____________________________________ ")
if 'left' in data.columns:
    attrition_counts = data['left'].value_counts()
    print(attrition_counts)

    # Plot attrition rates
    plt.figure(figsize=(5, 4))
    sns.barplot(x=attrition_counts.index, y=attrition_counts.values, palette='coolwarm')
    plt.title("Attrition Rate")
    plt.xlabel("Attrition (0 = Stayed, 1 = Left)")
    plt.ylabel("Number of Employees")
    plt.show()

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

print(data[['satisfactoryLevel', 'left']].isnull().sum())

# Commented out IPython magic to ensure Python compatibility.
!pip install seaborn --upgrade
!pip install matplotlib --upgrade


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline


# Step 3: Satisfaction Level vs. Attrition
if 'satisfactoryLevel' in data.columns and 'left' in data.columns:
  plt.figure(figsize=(8, 5))
  sns.boxplot(x='left', y='satisfactoryLevel', data=data, palette='Set2')
  plt.title("Satisfaction Level by Attrition")
  plt.xlabel("Attrition (0 = Stayed, 1 = Left)")
  plt.ylabel("Satisfaction Level")
  plt.show()

# Step 4: Salary Distribution and Attrition
if 'salary' in data.columns and 'left' in data.columns:

  plt.figure(figsize=(8, 5))
  sns.countplot(x='salary', hue='left', data=data, palette='viridis', order=data['salary'].value_counts().index)
  plt.title("Salary Levels and Attrition")
  plt.xlabel("Salary Level")
  plt.ylabel("Count")
  plt.legend(title='Attrition', loc='upper right')
  plt.show()

data.columns

# Step 5: Average Monthly Hours vs. Attrition
if 'avgMonthlyHours' in data.columns and 'left' in data.columns:
  plt.figure(figsize=(8, 5))
  sns.boxplot(x='left', y='avgMonthlyHours',hue='left', data=data, palette='coolwarm')
  plt.title("Average Monthly Hours by Attrition")
  plt.xlabel("Attrition (0 = Stayed, 1 = Left)")
  plt.ylabel("Average Monthly Hours")
  plt.show()

# Step 6: Department Analysis
if 'dept' in data.columns and 'left' in data.columns:
    plt.figure(figsize=(10, 6))
    sns.countplot(x='dept', hue='left', data=data, palette='Set1', order=data['dept'].value_counts().index)
    plt.title("Attrition by Department")
    plt.xlabel("Department")
    plt.ylabel("Count")
    plt.xticks(rotation=45)
    plt.legend(title='Attrition', loc='upper right')
    plt.show()

# Step 7: Correlation Matrix
plt.figure(figsize=(10, 6))
# Select only numeric columns
numeric_data = data.select_dtypes(include=['number'])
correlation_matrix = numeric_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

data.columns

# Step 8: Key Insights and Suggestions
print()
print("\n***************************************************************************Key Insights***************************************************************************")
if 'satisfactoryLevel' in data.columns:
    avg_satisfaction_left = data[data['left'] == 1]['satisfactoryLevel'].mean()
    avg_satisfaction_stayed = data[data['left'] == 0]['satisfactoryLevel'].mean()
    print(f"Average satisfaction level of employees who left: {avg_satisfaction_left:.2f}")
    print(f"Average satisfaction level of employees who stayed: {avg_satisfaction_stayed:.2f}")

if 'avgMonthlyHours' in data.columns:
    avg_hours_left = data[data['left'] == 1]['avgMonthlyHours'].mean()
    avg_hours_stayed = data[data['left'] == 0]['avgMonthlyHours'].mean()
    print(f"Average monthly hours of employees who left: {avg_hours_left:.2f}")
    print(f"Average monthly hours of employees who stayed: {avg_hours_stayed:.2f}")

print("\nSuggestions:")
print("- Improve satisfaction levels by conducting regular surveys and addressing grievances.")
print("- Implement workload management to ensure employees are not overworked.")
print("- Offer competitive salaries, especially in departments with high attrition.")
print("- Provide clear career advancement opportunities to employees.")